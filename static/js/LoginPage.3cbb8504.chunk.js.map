{"version":3,"file":"static/js/LoginPage.3cbb8504.chunk.js","mappings":"uOACA,EAA0B,2BAA1B,EAA4D,wBAA5D,EAAgG,6BAAhG,EAA+I,8DAA/I,EAAqN,yBAArN,EAAsT,yBAAtT,EAAwV,0BAAxV,EAA+X,8BAA/X,EAAqa,yB,UCK/ZA,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,KAAaC,MAAM,yBAAyBC,SAAS,YAC5DC,SAAUH,EAAAA,KACPI,IAAI,EAAG,sCACPC,IAAI,GAAI,4CACRH,SAAS,cAGRI,EAAgB,CACpBL,MAAO,GACPE,SAAU,IA0EZ,EAvEkB,WAChB,OAAyCI,EAAAA,EAAAA,IAAiB,CACxDC,cAAe,iBADjB,eAAOC,EAAP,KAIMC,GAJN,KAAgBC,WAIKC,EAAAA,EAAAA,OACfC,GAAkBD,EAAAA,EAAAA,MAExB,OACE,iBAAKE,UAAWC,EAAhB,WACE,gBAAID,UAAWC,EAAf,yBACa,iBAAMD,UAAWC,EAAjB,2BAGb,SAAC,KAAD,CACET,cAAeA,EACfP,iBAAkBA,EAClBiB,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAWnBT,EAAMQ,GAENC,KAhBJ,UAmBE,UAAC,KAAD,CAAMJ,UAAWC,EAAQI,YAAU,EAAnC,WACE,kBAAOL,UAAWC,EAASK,QAASV,EAApC,oBAGA,SAAC,KAAD,CACEI,UAAWC,EACXM,KAAK,QACLC,KAAK,QACLC,YAAY,OACZC,GAAId,KAEN,cAAGI,UAAWC,EAAd,UACE,SAAC,KAAD,CAAcO,KAAK,aAGrB,kBAAOR,UAAWC,EAASK,QAASP,EAApC,uBAGA,SAAC,KAAD,CACEC,UAAWC,EACXM,KAAK,WACLC,KAAK,WACLC,YAAY,WACZC,GAAIX,KAEN,cAAGC,UAAWC,EAAd,UACE,SAAC,KAAD,CAAcO,KAAK,gBAErB,mBAAQR,UAAWC,EAAUM,KAAK,SAASI,SAAU,KAArD,UACE,iBAAMX,UAAWC,EAAjB,+BC1EZ,EAJkB,WAChB,OAAO,SAAC,EAAD","sources":["webpack://phonebook-api-frontend/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.js","pages/LoginPage/LoginPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formBox\":\"LoginForm_formBox__rqVK0\",\"form\":\"LoginForm_form__gPEx5\",\"formTitle\":\"LoginForm_formTitle__xGeGl\",\"formTitleAccent\":\"LoginForm_formTitleAccent__OV1Jn LoginForm_formTitle__xGeGl\",\"label\":\"LoginForm_label__F7sLE\",\"nameLabel\":\"LoginForm_nameLabel__Z4J77 LoginForm_label__F7sLE\",\"input\":\"LoginForm_input__aQRtt\",\"button\":\"LoginForm_button__LodJg\",\"TextButton\":\"LoginForm_TextButton__fSmuh\",\"error\":\"LoginForm_error__012y+\"};","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { useLogInMutation } from 'redux/auth/authSlice';\nimport s from './LoginForm.module.css';\n\nconst validationSchema = Yup.object({\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string()\n    .min(3, 'must be at least 3 characters long')\n    .max(10, 'must  be no more than 10 characters long')\n    .required('Required'),\n});\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst LoginForm = () => {\n  const [logIn, { isLoading: isAdding }] = useLogInMutation({\n    fixedCacheKey: 'shared-logIn',\n  });\n\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  return (\n    <div className={s.formBox}>\n      <h2 className={s.formTitle}>\n        Sign In to <span className={s.formTitleAccent}>PHONEBOOK</span>\n      </h2>\n\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={(values, { resetForm }) => {\n          // if (checkContactName(values.name)) {\n          //   showMessageSameContactName();\n          //   return;\n          // }\n\n          // if (checkContactNumber(values.phone)) {\n          //   showMessageSameContactPhone();\n          //   return;\n          // }\n\n          logIn(values);\n          // showMessageAddContact();\n          resetForm();\n        }}\n      >\n        <Form className={s.form} noValidate>\n          <label className={s.label} htmlFor={emailInputId}>\n            Email\n          </label>\n          <Field\n            className={s.input}\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Mail\"\n            id={emailInputId}\n          />\n          <p className={s.error}>\n            <ErrorMessage name=\"email\" />\n          </p>\n\n          <label className={s.label} htmlFor={passwordInputId}>\n            Password\n          </label>\n          <Field\n            className={s.input}\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            id={passwordInputId}\n          />\n          <p className={s.error}>\n            <ErrorMessage name=\"password\" />\n          </p>\n          <button className={s.button} type=\"submit\" disabled={null}>\n            <span className={s.TextButton}>Submit</span>\n            {/* {isAdding && <LoaderButton />} */}\n          </button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm';\nimport s from './LoginPage.module.css';\n\nconst LoginPage = () => {\n  return <LoginForm />;\n};\n\nexport default LoginPage;\n"],"names":["validationSchema","Yup","email","required","password","min","max","initialValues","useLogInMutation","fixedCacheKey","logIn","emailInputId","isLoading","nanoid","passwordInputId","className","s","onSubmit","values","resetForm","noValidate","htmlFor","type","name","placeholder","id","disabled"],"sourceRoot":""}