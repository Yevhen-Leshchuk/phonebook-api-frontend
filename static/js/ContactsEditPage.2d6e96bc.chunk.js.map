{"version":3,"file":"static/js/ContactsEditPage.2d6e96bc.chunk.js","mappings":"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","sources":["webpack://phonebook-api-frontend/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.tsx","components/Notification/Notification.tsx","components/Section/Section.tsx","redux/contacts/contactSelectors.ts","webpack://phonebook-api-frontend/./src/pages/ContactsEditPage /ContactsEditPage.module.css?ba42","pages/ContactsEditPage /ContactsEditPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactFormBox\":\"ContactForm_contactFormBox__f55xA\",\"title\":\"ContactForm_title__jZguf\",\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"nameLabel\":\"ContactForm_nameLabel__+PeHB ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\",\"textButton\":\"ContactForm_textButton__zEgj3\",\"error\":\"ContactForm_error__C1smZ\"};","import { useNavigate } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { Formik, Field, Form, ErrorMessage, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport {\n  useFetchContactsQuery,\n  useAddContactMutation,\n  useUpdateContactMutation,\n} from '../../redux/contacts/contactsSlice';\nimport {\n  showMessageSameContactName,\n  showMessageSameContactPhone,\n  showMessageAddContact,\n  showMessageUpdateContact,\n} from '../../components/Notification/Notification';\nimport Loader from '../Loader';\nimport IInitValues from '../../interfaces/InitValues.intarface';\nimport s from './ContactForm.module.css';\n\nconst validationSchema = Yup.object({\n  name: Yup.string()\n    .min(3, 'must be at least 3 characters long')\n    .max(10, 'must  be no more than 10 characters long')\n    .required('Required'),\n  number: Yup.string()\n    .min(7, 'must be 7 characters long')\n    .max(10, 'must  be no more than 10 characters long')\n    .required('Required'),\n});\n\ninterface Props {\n  id?: string | undefined;\n}\n\nexport default function ContactForm({ id }: Props) {\n  let navigate = useNavigate();\n\n  const { data: contacts } = useFetchContactsQuery();\n\n  const [addContact, { data: addedUser, isLoading: isAdding }] =\n    useAddContactMutation();\n  const [updateContact, { originalArgs }] = useUpdateContactMutation();\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  useEffect(() => {\n    if (!addedUser) {\n      return;\n    }\n\n    showMessageAddContact();\n  }, [addedUser]);\n\n  useEffect(() => {\n    if (!originalArgs) {\n      return;\n    }\n\n    showMessageUpdateContact();\n  }, [originalArgs]);\n\n  const checkContactName = (name: string) => {\n    const checkName = name.toLowerCase();\n    return contacts?.find(contact => contact.name.toLowerCase() === checkName);\n  };\n\n  const checkContactNumber = (number: string) => {\n    const checkNumber = number;\n\n    return contacts?.find(contact => contact.number === checkNumber);\n  };\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const onSubmit = (\n    values: IInitValues,\n    { resetForm }: FormikHelpers<typeof initialValues>\n  ) => {\n    const update = {\n      ...values,\n      id,\n    };\n\n    if (update.id !== undefined) {\n      updateContact(update);\n      navigate('/contacts');\n      resetForm();\n    } else {\n      if (checkContactName(values.name)) {\n        showMessageSameContactName();\n        return;\n      }\n\n      if (checkContactNumber(values.number)) {\n        showMessageSameContactPhone();\n        return;\n      }\n\n      addContact(values);\n    }\n    resetForm();\n  };\n\n  return (\n    <div className={s.contactFormBox}>\n      <h2 className={s.title}>Phonebook</h2>\n\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n      >\n        <Form className={s.form}>\n          <label className={s.nameLabel} htmlFor={nameInputId}>\n            Name\n          </label>\n          <Field\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Name\"\n            id={nameInputId}\n          />\n          <p className={s.error}>\n            <ErrorMessage name=\"name\" />\n          </p>\n          <label className={s.label} htmlFor={numberInputId}>\n            Phone\n          </label>\n\n          <Field\n            className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Phone\"\n            id={numberInputId}\n          />\n          <p className={s.error}>\n            <ErrorMessage name=\"number\" />\n          </p>\n          <button className={s.button} type=\"submit\" disabled={isAdding}>\n            <span className={s.textButton}>Save contact</span>\n            {isAdding && <Loader />}\n          </button>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n","import { notice, success, error } from '@pnotify/core/dist/PNotify.js';\nimport '@pnotify/core/dist/PNotify.css';\nimport '@pnotify/core/dist/BrightTheme.css';\nimport './notification.css';\n\nexport const showMessageSameContactName = () => {\n  notice({\n    text: 'This name already exists',\n    width: '370px',\n  });\n};\n\nexport const showMessageSameContactPhone = () => {\n  notice({\n    text: 'This phone already exists',\n    width: '370px',\n  });\n};\n\nexport const showMessageAddContact = () => {\n  success({\n    text: 'Contact added successfully!',\n    width: '370px',\n  });\n};\n\nexport const showMessageUpdateContact = () => {\n  success({\n    text: 'Contact successfully updated!',\n    width: '370px',\n  });\n};\n\nexport const showMessageDeleteContact = () => {\n  success({\n    text: 'Contact successfully removed!',\n    width: '370px',\n  });\n};\n\nexport const showMessageWelcomeUser = () => {\n  success({\n    text: 'Welcome to the phonebook!',\n    width: '370px',\n  });\n};\n\nexport const showMessageRegisterUser = () => {\n  success({\n    text: 'You are successfully registered! To enter the phonebook, please sign in.',\n    width: '370px',\n  });\n};\n\nexport const showMessageErrorRegisterUser = () => {\n  error({\n    text: 'This user already exists!',\n    width: '370px',\n  });\n};\n\nexport const showMessageErrorLoginUser = () => {\n  error({\n    text: 'Incorrect email or password!',\n    width: '370px',\n  });\n};\n","interface Props {\n  children: JSX.Element;\n}\n\nconst Section = ({ children }: Props) => {\n  return <section>{children}</section>;\n};\n\nexport default Section;\n","import type { RootState } from '../store';\n\nexport const getUserId = (state: RootState) => state.updateContact.id;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactFormBox\":\"ContactsEditPage_contactFormBox__Cd9ZS\",\"goBackBtn\":\"ContactsEditPage_goBackBtn__9mA0w\"};","import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport Section from '../../components/Section';\nimport ContactForm from '../../components/ContactForm';\nimport { useFetchContactsQuery } from '../../redux/contacts/contactsSlice';\nimport { getUserId } from '../../redux/contacts/contactSelectors';\nimport IContacts from '../../interfaces/Contacts.interface';\nimport s from './ContactsEditPage.module.css';\n\nconst initialValuesUpdateUser = {\n  id: '',\n  name: '',\n  number: '',\n};\n\nconst ContactsEditPage = () => {\n  const navigate = useNavigate();\n  const userId = useSelector(getUserId);\n\n  const [userupdate, setUserUpdate] = useState<IContacts | undefined>(\n    initialValuesUpdateUser\n  );\n\n  const { data: contacts } = useFetchContactsQuery();\n  console.log('editPage');\n\n  useEffect(() => {\n    const getUserById = (userId: string) => {\n      return contacts?.find(contact => contact.id === userId);\n    };\n\n    const updateUser = getUserById(userId);\n    setUserUpdate(updateUser);\n\n    return () => {\n      setUserUpdate(initialValuesUpdateUser);\n    };\n  }, [contacts, userId]);\n\n  return (\n    <>\n      <div className={s.contactFormBox}>\n        <Section>\n          <ContactForm id={userupdate?.id} />\n        </Section>\n      </div>\n      <button\n        className={s.goBackBtn}\n        type=\"button\"\n        onClick={() => navigate(-1)}\n      >\n        Go back\n      </button>\n    </>\n  );\n};\nexport default ContactsEditPage;\n"],"names":["validationSchema","Yup","name","min","max","required","number","ContactForm","id","navigate","useNavigate","contacts","useFetchContactsQuery","data","useAddContactMutation","addContact","addedUser","isAdding","isLoading","useUpdateContactMutation","updateContact","originalArgs","nameInputId","nanoid","numberInputId","useEffect","showMessageAddContact","showMessageUpdateContact","className","s","initialValues","onSubmit","values","resetForm","update","undefined","checkName","toLowerCase","find","contact","checkContactName","showMessageSameContactName","checkNumber","checkContactNumber","showMessageSameContactPhone","htmlFor","type","placeholder","disabled","Loader","notice","text","width","success","showMessageDeleteContact","showMessageWelcomeUser","showMessageRegisterUser","showMessageErrorRegisterUser","error","showMessageErrorLoginUser","children","getUserId","state","initialValuesUpdateUser","userId","useSelector","useState","userupdate","setUserUpdate","console","log","updateUser","getUserById","Section","onClick"],"sourceRoot":""}