{"version":3,"file":"static/js/RegistrationPage.f96b692b.chunk.js","mappings":"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","sources":["components/LoaderButton/LoaderButton.js","components/Notification/Notification.js","webpack://phonebook-api-frontend/./src/components/RegistrationForm/RegistrationForm.module.css?5637","components/RegistrationForm/RegistrationForm.js","webpack://phonebook-api-frontend/./src/pages/RegistrationPage/RegistrationPage.module.css?b753","pages/RegistrationPage/RegistrationPage.js"],"sourcesContent":["import { RotatingLines } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div>\n      <RotatingLines strokeColor=\"#204454\" width={30} height={30} />\n    </div>\n  );\n};\n\nexport default Loader;\n","import { notice, success, error } from '@pnotify/core/dist/PNotify.js';\nimport '@pnotify/core/dist/PNotify.css';\nimport '@pnotify/core/dist/BrightTheme.css';\n\nexport const showMessageSameContactName = () => {\n  notice({\n    text: 'This name already exists',\n    width: '370px',\n  });\n};\n\nexport const showMessageSameContactPhone = () => {\n  notice({\n    text: 'This phone already exists',\n    width: '370px',\n  });\n};\n\nexport const showMessageAddContact = () => {\n  success({\n    text: 'Contact added successfully!',\n    width: '370px',\n  });\n};\n\nexport const showMessageUpdateContact = () => {\n  success({\n    text: 'Contact successfully updated!',\n    width: '370px',\n  });\n};\n\nexport const showMessageDeleteContact = () => {\n  success({\n    text: 'Contact successfully removed!',\n    width: '370px',\n  });\n};\n\nexport const showMessageWelcomeUser = () => {\n  success({\n    text: 'Welcome to the phonebook!',\n    width: '370px',\n  });\n};\n\nexport const showMessageRegisterUser = () => {\n  success({\n    text: 'You are successfully registered! To enter the phonebook, please sign in.',\n    width: '370px',\n  });\n};\n\nexport const showMessageErrorRegisterUser = () => {\n  error({\n    text: 'This user already exists!',\n    width: '370px',\n  });\n};\n\nexport const showMessageErrorLoginUser = () => {\n  error({\n    text: 'Incorrect email or password!',\n    width: '370px',\n  });\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formBox\":\"RegistrationForm_formBox__Wqt9b\",\"form\":\"RegistrationForm_form__c8X43\",\"formTitle\":\"RegistrationForm_formTitle__lR10v\",\"formTitleAccent\":\"RegistrationForm_formTitleAccent__5qaI4 RegistrationForm_formTitle__lR10v\",\"label\":\"RegistrationForm_label__zrkEU\",\"nameLabel\":\"RegistrationForm_nameLabel__CWAQ3 RegistrationForm_label__zrkEU\",\"input\":\"RegistrationForm_input__EgGQR\",\"button\":\"RegistrationForm_button__XU1LB\",\"textButton\":\"RegistrationForm_textButton__ASilN\",\"error\":\"RegistrationForm_error__hvKUg\"};","import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { useRegisterMutation } from 'redux/auth/authSlice';\nimport {\n  showMessageRegisterUser,\n  showMessageErrorRegisterUser,\n} from 'components/Notification/Notification';\nimport LoaderButton from 'components/LoaderButton';\nimport s from './RegistrationForm.module.css';\n\nconst validationSchema = Yup.object({\n  name: Yup.string()\n    .min(3, 'must be at least 3 characters long')\n    .max(10, 'must  be no more than 10 characters long')\n    .required('Required'),\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string()\n    .min(3, 'must be at least 3 characters long')\n    .max(10, 'must  be no more than 10 characters long')\n    .required('Required'),\n});\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst RegistrationForm = () => {\n  let navigate = useNavigate();\n  const nameInputId = nanoid();\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  const [register, { data, error, isLoading: isAdding }] =\n    useRegisterMutation();\n\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    navigate('/login');\n    showMessageRegisterUser();\n  }, [data, navigate]);\n\n  useEffect(() => {\n    if (!error?.status) {\n      return;\n    }\n    showMessageErrorRegisterUser();\n  }, [error?.status]);\n\n  const onSubmit = (values, { resetForm }) => {\n    register(values);\n    resetForm();\n  };\n\n  return (\n    <div className={s.formBox}>\n      <h2 className={s.formTitle}>\n        Sign Up to <span className={s.formTitleAccent}>PHONEBOOK</span>\n      </h2>\n\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n      >\n        <Form className={s.form} noValidate>\n          <label className={s.nameLabel} htmlFor={nameInputId}>\n            Name\n          </label>\n          <Field\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Name\"\n            id={nameInputId}\n          />\n          <p className={s.error}>\n            <ErrorMessage name=\"name\" />\n          </p>\n\n          <label className={s.label} htmlFor={emailInputId}>\n            Email\n          </label>\n          <Field\n            className={s.input}\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Mail\"\n            id={emailInputId}\n          />\n          <p className={s.error}>\n            <ErrorMessage name=\"email\" />\n          </p>\n\n          <label className={s.label} htmlFor={passwordInputId}>\n            Password\n          </label>\n          <Field\n            className={s.input}\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            id={passwordInputId}\n          />\n          <p className={s.error}>\n            <ErrorMessage name=\"password\" />\n          </p>\n          <button className={s.button} type=\"submit\" disabled={null}>\n            <span className={s.textButton}>Submit</span>\n            {isAdding && <LoaderButton />}\n          </button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default RegistrationForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"authPageBox\":\"RegistrationPage_authPageBox__cjrUk\"};","import RegistrationForm from 'components/RegistrationForm';\nimport s from './RegistrationPage.module.css';\n\nconst AuthPage = () => {\n  return (\n    <div className={s.authPageBox}>\n      <RegistrationForm />\n    </div>\n  );\n};\n\nexport default AuthPage;\n"],"names":["strokeColor","width","height","showMessageSameContactName","notice","text","showMessageSameContactPhone","showMessageAddContact","success","showMessageUpdateContact","showMessageDeleteContact","showMessageWelcomeUser","showMessageRegisterUser","showMessageErrorRegisterUser","error","showMessageErrorLoginUser","validationSchema","Yup","name","min","max","required","email","password","initialValues","navigate","useNavigate","nameInputId","nanoid","emailInputId","passwordInputId","useRegisterMutation","register","data","isAdding","isLoading","useEffect","status","className","s","onSubmit","values","resetForm","noValidate","htmlFor","type","placeholder","id","disabled","LoaderButton"],"sourceRoot":""}