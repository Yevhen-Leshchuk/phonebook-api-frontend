{"version":3,"file":"static/js/ContactsEditPage.f516f959.chunk.js","mappings":"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","sources":["webpack://phonebook-api-frontend/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","webpack://phonebook-api-frontend/./src/components/LoaderButton/LoaderButton.module.css?55b0","components/LoaderButton/LoaderButton.js","webpack://phonebook-api-frontend/./src/components/Section/Section.module.css?dbe8","components/Section/Section.js","pages/ContactsEditPage /ContactsEditPage .js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"nameLabel\":\"ContactForm_nameLabel__+PeHB ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\",\"TextButton\":\"ContactForm_TextButton__CdDdt\",\"error\":\"ContactForm_error__C1smZ\"};","import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { notice, success } from '@pnotify/core/dist/PNotify.js';\nimport '@pnotify/core/dist/PNotify.css';\nimport '@pnotify/core/dist/BrightTheme.css';\nimport {\n  useFetchContactsQuery,\n  useAddContactMutation,\n  useUpdateContactMutation,\n} from 'redux/contacts/contactsSlice';\nimport { useLogInMutation } from 'redux/auth/authSlice';\nimport LoaderButton from 'components/LoaderButton';\nimport s from './ContactForm.module.css';\n\nconst validationSchema = Yup.object({\n  name: Yup.string()\n    .min(3, 'must be at least 3 characters long')\n    .max(10, 'must  be no more than 10 characters long')\n    .required('Required'),\n  number: Yup.string()\n    .min(7, 'must be 7 characters long')\n    .max(10, 'must  be no more than 10 characters long')\n    .required('Required'),\n});\n\nexport default function ContactForm({ name, number, id }) {\n  const [nameValue, setNameValue] = useState('');\n  const [numberValue, setNumberValue] = useState('');\n\n  let navigate = useNavigate();\n\n  useEffect(() => {\n    setNameValue(name);\n    setNumberValue(number);\n  }, [name, number]);\n\n  const [logIn, { data: user }] = useLogInMutation({\n    fixedCacheKey: 'shared-logIn',\n  });\n  const token = user?.token;\n\n  const { data } = useFetchContactsQuery(token);\n  const [addContact, { isLoading: isAdding }] = useAddContactMutation();\n  const [updateContact] = useUpdateContactMutation();\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const checkContactName = name => {\n    const checkName = name.toLowerCase();\n\n    return data?.find(contact => contact.name.toLowerCase() === checkName);\n  };\n\n  const checkContactNumber = number => {\n    const checkNumber = number;\n\n    return data?.find(contact => contact.number === checkNumber);\n  };\n\n  const showMessageSameContactName = () => {\n    notice({\n      text: 'This name already exists',\n      width: '370px',\n    });\n  };\n\n  const showMessageSameContactPhone = () => {\n    notice({\n      text: 'This phone already exists',\n      width: '370px',\n    });\n  };\n\n  const showMessageAddContact = () => {\n    success({\n      text: 'Contact added successfully!',\n      width: '370px',\n    });\n  };\n\n  const showMessageupdateContact = () => {\n    success({\n      text: 'Contact successfully updated!',\n      width: '370px',\n    });\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={{ name: '', number: '', token }}\n        validationSchema={validationSchema}\n        onSubmit={(values, { resetForm }) => {\n          const update = {\n            ...values,\n            id,\n          };\n\n          if (update.id !== undefined) {\n            updateContact(update);\n            showMessageupdateContact();\n            navigate('/contacts');\n            resetForm();\n          } else {\n            if (checkContactName(values.name)) {\n              showMessageSameContactName();\n              return;\n            }\n\n            if (checkContactNumber(values.number)) {\n              showMessageSameContactPhone();\n              return;\n            }\n\n            addContact(values);\n            showMessageAddContact();\n          }\n          resetForm();\n        }}\n      >\n        <Form className={s.form}>\n          <label className={s.nameLabel} htmlFor={nameInputId}>\n            Name\n          </label>\n          <Field\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Name\"\n            id={nameInputId}\n          />\n          <p className={s.error}>\n            <ErrorMessage name=\"name\" />\n          </p>\n          <label className={s.label} htmlFor={numberInputId}>\n            Phone\n          </label>\n\n          <Field\n            className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Phone\"\n            id={numberInputId}\n          />\n          <p className={s.error}>\n            <ErrorMessage name=\"number\" />\n          </p>\n          <button className={s.button} type=\"submit\" disabled={isAdding}>\n            <span className={s.TextButton}>Save contact</span>\n            {isAdding && <LoaderButton />}\n          </button>\n        </Form>\n      </Formik>\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"LoaderBox\":\"LoaderButton_LoaderBox__mLRs9\"};","import { RotatingLines } from 'react-loader-spinner';\nimport s from './LoaderButton.module.css';\n\nconst Loader = () => {\n  return (\n    <div className={s.LoaderBox}>\n      <RotatingLines strokeColor=\"#1b1b1c\" width={30} height={30} />\n    </div>\n  );\n};\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\",\"title\":\"Section_title__SLHvV\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className={s.section}>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import { useState, useEffect } from 'react';\nimport Section from 'components/Section';\nimport ContactForm from 'components/ContactForm';\nimport { useFetchContactsQuery } from 'redux/contacts/contactsSlice';\nimport { useLogInMutation } from 'redux/auth/authSlice';\nimport s from './ContactsEditPage .module.css';\n\nconst ContactsEditPage = () => {\n  const [userupdate, setUserUpdate] = useState(null);\n  const [logIn, { data: user }] = useLogInMutation({\n    fixedCacheKey: 'shared-logIn',\n  });\n  const token = user?.token;\n\n  const { data } = useFetchContactsQuery(token);\n\n  useEffect(() => {\n    const persistStorage = localStorage.getItem('persist:updateContact');\n    const parsedSettings = JSON.parse(persistStorage);\n    const userId = parsedSettings.id.replace(/^\"|\"$/g, '');\n\n    // if (userupdate?.id !== userId) {\n    //   return;\n    // }\n\n    const getUserById = userId => {\n      return data?.find(contact => contact.id === userId);\n    };\n\n    const updateUser = getUserById(userId);\n    setUserUpdate(updateUser);\n\n    return () => {\n      setUserUpdate(null);\n    };\n  });\n\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <ContactForm {...userupdate} />\n      </Section>\n    </>\n  );\n};\nexport default ContactsEditPage;\n"],"names":["validationSchema","Yup","name","min","max","required","number","ContactForm","id","useState","setNameValue","setNumberValue","navigate","useNavigate","useEffect","useLogInMutation","fixedCacheKey","user","data","token","useFetchContactsQuery","useAddContactMutation","addContact","isAdding","isLoading","useUpdateContactMutation","updateContact","nameInputId","nanoid","numberInputId","initialValues","onSubmit","values","resetForm","update","undefined","success","text","width","checkName","toLowerCase","find","contact","checkContactName","notice","checkNumber","checkContactNumber","className","s","htmlFor","type","placeholder","disabled","LoaderButton","strokeColor","height","title","children","userupdate","setUserUpdate","persistStorage","localStorage","getItem","updateUser","userId","getUserById","JSON","parse","replace","Section"],"sourceRoot":""}