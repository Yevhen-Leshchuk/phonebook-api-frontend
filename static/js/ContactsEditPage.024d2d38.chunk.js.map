{"version":3,"file":"static/js/ContactsEditPage.024d2d38.chunk.js","mappings":"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","sources":["webpack://phonebook-api-frontend/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","components/LoaderButton/LoaderButton.js","components/Notification/Notification.js","components/Section/Section.js","webpack://phonebook-api-frontend/./src/pages/ContactsEditPage /ContactsEditPage.module.css?ba42","pages/ContactsEditPage /ContactsEditPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactFormBox\":\"ContactForm_contactFormBox__f55xA\",\"title\":\"ContactForm_title__jZguf\",\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"nameLabel\":\"ContactForm_nameLabel__+PeHB ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\",\"textButton\":\"ContactForm_textButton__zEgj3\",\"error\":\"ContactForm_error__C1smZ\"};","import { useNavigate } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport {\n  useFetchContactsQuery,\n  useAddContactMutation,\n  useUpdateContactMutation,\n} from 'redux/contacts/contactsSlice';\nimport {\n  showMessageSameContactName,\n  showMessageSameContactPhone,\n  showMessageAddContact,\n  showMessageUpdateContact,\n} from 'components/Notification/Notification';\nimport { useLogInMutation } from 'redux/auth/authSlice';\nimport LoaderButton from 'components/LoaderButton';\nimport s from './ContactForm.module.css';\n\nconst validationSchema = Yup.object({\n  name: Yup.string()\n    .min(3, 'must be at least 3 characters long')\n    .max(10, 'must  be no more than 10 characters long')\n    .required('Required'),\n  number: Yup.string()\n    .min(7, 'must be 7 characters long')\n    .max(10, 'must  be no more than 10 characters long')\n    .required('Required'),\n});\n\nexport default function ContactForm({ id }) {\n  let navigate = useNavigate();\n  const [logIn, { data: user }] = useLogInMutation({\n    fixedCacheKey: 'shared-logIn',\n  });\n  console.log(logIn);\n  const token = user?.token;\n  const { data } = useFetchContactsQuery(token);\n  const [addContact, { data: addedUser, isLoading: isAdding }] =\n    useAddContactMutation();\n  const [updateContact, { originalArgs }] = useUpdateContactMutation();\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  useEffect(() => {\n    if (!addedUser) {\n      return;\n    }\n\n    showMessageAddContact();\n  }, [addedUser]);\n\n  useEffect(() => {\n    if (!originalArgs) {\n      return;\n    }\n\n    showMessageUpdateContact();\n  }, [originalArgs]);\n\n  const checkContactName = name => {\n    const checkName = name.toLowerCase();\n\n    return data?.find(contact => contact.name.toLowerCase() === checkName);\n  };\n\n  const checkContactNumber = number => {\n    const checkNumber = number;\n\n    return data?.find(contact => contact.number === checkNumber);\n  };\n\n  const initialValues = {\n    name: '',\n    number: '',\n    token,\n  };\n\n  const onSubmit = (values, { resetForm }) => {\n    const update = {\n      ...values,\n      id,\n    };\n\n    if (update.id !== undefined) {\n      updateContact(update);\n      navigate('/contacts');\n      resetForm();\n    } else {\n      if (checkContactName(values.name)) {\n        showMessageSameContactName();\n        return;\n      }\n\n      if (checkContactNumber(values.number)) {\n        showMessageSameContactPhone();\n        return;\n      }\n\n      addContact(values);\n    }\n    resetForm();\n  };\n\n  return (\n    <div className={s.contactFormBox}>\n      <h2 className={s.title}>Phonebook</h2>\n\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n      >\n        <Form className={s.form}>\n          <label className={s.nameLabel} htmlFor={nameInputId}>\n            Name\n          </label>\n          <Field\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Name\"\n            id={nameInputId}\n          />\n          <p className={s.error}>\n            <ErrorMessage name=\"name\" />\n          </p>\n          <label className={s.label} htmlFor={numberInputId}>\n            Phone\n          </label>\n\n          <Field\n            className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Phone\"\n            id={numberInputId}\n          />\n          <p className={s.error}>\n            <ErrorMessage name=\"number\" />\n          </p>\n          <button className={s.button} type=\"submit\" disabled={isAdding}>\n            <span className={s.textButton}>Save contact</span>\n            {isAdding && <LoaderButton />}\n          </button>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n\nContactForm.propTypes = {\n  id: PropTypes.string,\n};\n","import { RotatingLines } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div>\n      <RotatingLines strokeColor=\"#204454\" width={30} height={30} />\n    </div>\n  );\n};\n\nexport default Loader;\n","import { notice, success, error } from '@pnotify/core/dist/PNotify.js';\nimport '@pnotify/core/dist/PNotify.css';\nimport '@pnotify/core/dist/BrightTheme.css';\n\nexport const showMessageSameContactName = () => {\n  notice({\n    text: 'This name already exists',\n    width: '370px',\n  });\n};\n\nexport const showMessageSameContactPhone = () => {\n  notice({\n    text: 'This phone already exists',\n    width: '370px',\n  });\n};\n\nexport const showMessageAddContact = () => {\n  success({\n    text: 'Contact added successfully!',\n    width: '370px',\n  });\n};\n\nexport const showMessageUpdateContact = () => {\n  success({\n    text: 'Contact successfully updated!',\n    width: '370px',\n  });\n};\n\nexport const showMessageDeleteContact = () => {\n  success({\n    text: 'Contact successfully removed!',\n    width: '370px',\n  });\n};\n\nexport const showMessageWelcomeUser = () => {\n  success({\n    text: 'Welcome to the phonebook!',\n    width: '370px',\n  });\n};\n\nexport const showMessageRegisterUser = () => {\n  success({\n    text: 'You are successfully registered! To enter the phonebook, please sign in.',\n    width: '370px',\n  });\n};\n\nexport const showMessageErrorRegisterUser = () => {\n  error({\n    text: 'This user already exists!',\n    width: '370px',\n  });\n};\n\nexport const showMessageErrorLoginUser = () => {\n  error({\n    text: 'Incorrect email or password!',\n    width: '370px',\n  });\n};\n","import PropTypes from 'prop-types';\n\nconst Section = ({ children }) => {\n  return <section>{children}</section>;\n};\n\nSection.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Section;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactFormBox\":\"ContactsEditPage_contactFormBox__Cd9ZS\",\"goBackBtn\":\"ContactsEditPage_goBackBtn__9mA0w\"};","import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Section from 'components/Section';\nimport ContactForm from 'components/ContactForm';\nimport { useFetchContactsQuery } from 'redux/contacts/contactsSlice';\nimport { useLogInMutation } from 'redux/auth/authSlice';\nimport s from './ContactsEditPage.module.css';\n\nconst ContactsEditPage = () => {\n  const navigate = useNavigate();\n  const [userupdate, setUserUpdate] = useState(null);\n  const [logIn, { data: user }] = useLogInMutation({\n    fixedCacheKey: 'shared-logIn',\n  });\n  console.log(logIn);\n  const token = user?.token;\n  const { data } = useFetchContactsQuery(token);\n\n  useEffect(() => {\n    const persistStorage = localStorage.getItem('persist:updateContact');\n    const parsedSettings = JSON.parse(persistStorage);\n    const userId = parsedSettings.id.replace(/^\"|\"$/g, '');\n\n    const getUserById = userId => {\n      return data?.find(contact => contact.id === userId);\n    };\n\n    const updateUser = getUserById(userId);\n    setUserUpdate(updateUser);\n\n    return () => {\n      setUserUpdate(null);\n    };\n  }, [data]);\n\n  return (\n    <>\n      <div className={s.contactFormBox}>\n        <Section>\n          <ContactForm {...userupdate} />\n        </Section>\n      </div>\n      <button\n        className={s.goBackBtn}\n        type=\"button\"\n        onClick={() => navigate(-1)}\n      >\n        Go back\n      </button>\n    </>\n  );\n};\nexport default ContactsEditPage;\n"],"names":["validationSchema","Yup","name","min","max","required","number","ContactForm","id","navigate","useNavigate","useLogInMutation","fixedCacheKey","logIn","user","data","console","log","token","useFetchContactsQuery","useAddContactMutation","addContact","addedUser","isAdding","isLoading","useUpdateContactMutation","updateContact","originalArgs","nameInputId","nanoid","numberInputId","useEffect","showMessageAddContact","showMessageUpdateContact","initialValues","className","s","onSubmit","values","resetForm","update","undefined","checkName","toLowerCase","find","contact","checkContactName","showMessageSameContactName","checkNumber","checkContactNumber","showMessageSameContactPhone","htmlFor","type","placeholder","disabled","LoaderButton","strokeColor","width","height","notice","text","success","showMessageDeleteContact","showMessageWelcomeUser","showMessageRegisterUser","showMessageErrorRegisterUser","error","showMessageErrorLoginUser","children","useState","userupdate","setUserUpdate","persistStorage","localStorage","getItem","updateUser","userId","getUserById","JSON","parse","replace","Section","onClick"],"sourceRoot":""}